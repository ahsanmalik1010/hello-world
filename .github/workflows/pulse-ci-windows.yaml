name: CI

on:
  push:
    branches:
      - '**'
    tags:
      - '**'
  schedule:
    - cron: '23 5 * * *'  # Daily at 9:23 PM PST (05:23 UTC)

env:
  PYTHON_VERSION: '3.10'
  AWS_REGION: us-east-2
  EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
  RUNNER_LABEL: self-hosted-win-22

jobs:

  start-runner:
    name: Start EC2 Runner
    runs-on: ubuntu-22.04
    outputs:
      ready: ${{ steps.ready-check.outputs.runner_ready }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_DEV_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEV_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Start EC2 instance
        run: |
          aws ec2 start-instances --instance-ids ${{ env.EC2_INSTANCE_ID }}
          echo "Waiting for EC2 instance to enter 'running' state..."
          aws ec2 wait instance-running --instance-ids ${{ env.EC2_INSTANCE_ID }}
          echo "Instance is running."

  build:
    needs: start-runner
    runs-on: [self-hosted, self-hosted-win-22]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          submodules: recursive
          token: ${{ secrets.CI_PULSE_TOKEN }}
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Cache ccache
        uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/*.[ch]pp', '**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-ccache-
      - name: Check Semantic Versioning
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          # Regex for a semver digit
          D='0|[1-9][0-9]*'
          # Regex for a semver pre-release word
          PW='[0-9]*[a-zA-Z-][0-9a-zA-Z-]*'
          # Regex for a semver build-metadata word
          MW='[0-9a-zA-Z-]+'

          echo $GITHUB_REF_NAME

          if [[ "$GITHUB_REF_NAME" =~ ^v($D)\.($D)\.($D)(-(($D|$PW)(\.($D|$PW))*))?(\+($MW(\.$MW)*))?$ ]]; then
            echo "Valid semantic version detected: ${GITHUB_REF_NAME}"
            echo "SEMVER_VALID=true" >> "$GITHUB_ENV"
          else
            echo "Invalid semantic version: ${GITHUB_REF_NAME}. Skipping tagged steps."
            echo "SEMVER_VALID=false" >> "$GITHUB_ENV"
          fi
      - name: SemVer Valid
        shell: powershell
        run: |
          echo "SEMVER_VALID is $env:SEMVER_VALID"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Install QtIFW
        shell: powershell
        run: |
          ls "${{ github.workspace }}"
          # Install aqtinstall (unofficial qt command line installer tool)
          python -m pip install --upgrade aqtinstall

          # Install QtIFW
          aqt install-tool windows desktop tools_ifw qt.tools.ifw.47 --outputdir ${{ github.workspace }}
          ls "${{ github.workspace }}"

          # Run binarycreator
          ${{ github.workspace }}\Tools\QtInstallerFramework\4.7\bin\binarycreator.exe -h
      - name: Choco Installs - Cmake, Ninja, 7z
        shell: powershell
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
          cmake -h
          choco install ninja -y
          choco install 7zip -y
      - name: Install MinGW 13.1.0
        shell: powershell
        run: |
          # Note: aqt installs an incompatible MinGW version.  This step installs a compatible version manually.

          # Download MinGW 13.1.0 from niXman/mingw-builds-binaries (official)
          $mingwUrl = "https://github.com/niXman/mingw-builds-binaries/releases/download/13.1.0-rt_v11-rev1/x86_64-13.1.0-release-posix-seh-msvcrt-rt_v11-rev1.7z"
          Invoke-WebRequest -Uri $mingwUrl -OutFile "${{ github.workspace }}\mingw64.7z"

          # Extract MinGW to the current directory
          7z x ${{ github.workspace }}\mingw64.7z -o"." -y

          # Add MinGW to the start of the path
          echo "PATH=$env:GITHUB_WORKSPACE\mingw64\bin;$env:PATH" >> $env:GITHUB_ENV
      - name: Install Qt6 and extra modules
        shell: powershell
        run: |
          aqt install-qt windows desktop 6.8.2 win64_mingw --outputdir ${{ github.workspace }}\Qt --modules qtwebsockets qtserialbus qtserialport qtcharts
      - name: Install Qt6Mqtt
        shell: powershell
        run: |
          git clone https://github.com/qt/qtmqtt.git
          cd qtmqtt
          git checkout 6.8.2
          md build
          cd build
          ${{ github.workspace }}\Qt\6.8.2\mingw_64\bin\qt-configure-module.bat ..
          cmake --build .
          cmake --install .
      - name: Configure OpenSSL environment
        shell: powershell
        run: |
          echo "OPENSSL_ROOT_DIR=C:\actions-runner\openssl\3.5.0\openssl" >> $env:GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=C:\actions-runner\openssl\3.5.0\openssl\include" >> $env:GITHUB_ENV
          echo "OPENSSL_LIB_DIR=C:\actions-runner\openssl\3.5.0\openssl\lib" >> $env:GITHUB_ENV
          echo "C:\actions-runner\openssl\3.5.0\openssl\bin" >> $env:GITHUB_PATH
      - name: Set PULSE_VERSION in CMakeLists.txt before building
        if: startsWith(github.ref, 'refs/tags/') && env.SEMVER_VALID == 'true'
        shell: bash
        run: |
          # Note: Version follow SemVer Format
          echo "Git Tag: ${{ github.ref_name }}"
          SW_VERSION="${{ github.ref_name }}"

          # Remove leading 'v'
          SW_VERSION_DROPPED_V=${SW_VERSION#v}
          sed -i -E "s/set\(PULSE_VERSION .*?\)/set(PULSE_VERSION \"${SW_VERSION_DROPPED_V}\")/" pulse/CMakeLists.txt
          cat pulse/CMakeLists.txt
      - name: Configure CMake
        shell: powershell
        run: |
          # Cmake using MinGW 13.1.0
          cmake -S . -B build -G "Ninja" -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_PREFIX_PATH="${{ github.workspace }}\Qt\6.8.2\mingw_64" -DOPENSSL_ROOT_DIR="${{ github.workspace }}\openssl"
      - name: Build
        shell: powershell
        run: |
          cmake --build build --target all -- -j $env:NUMBER_OF_PROCESSORS
      - name: Deploy & Create Installer
        if: startsWith(github.ref, 'refs/tags/') && env.SEMVER_VALID == 'true'
        shell: powershell
        run: |
          cmake --install build --prefix "${{ github.workspace }}/installprefix"
          ls ${{ github.workspace }}/installprefix/bin
          python ${{ github.workspace }}/pulse/installer/makeinstaller.py --install-prefix "${{ github.workspace }}\installprefix" --qt-directory "${{ github.workspace }}\Qt" --qt-version "6.8.2" --qtifw-directory "${{ github.workspace }}\Tools\QtInstallerFramework\4.7\" --openssl-directory "C:\actions-runner\openssl\3.5.0\openssl"
      - name: Install Poetry & Venv & deploy installer to Sharepoint
        if: startsWith(github.ref, 'refs/tags/') && env.SEMVER_VALID == 'true'
        shell: bash
        run: |
          python3 -m ensurepip
          python3 -m pip install --upgrade pip
          python3 -m pip install poetry==1.5.1
          poetry --version
          poetry config virtualenvs.in-project true
          poetry config virtualenvs.path .
          # Workaround for: ChefBuildError: Backend 'setuptools.build_meta:__legacy__' is not available.
          # Fix is in Poetry 1.7.0. See https://github.com/python-poetry/poetry/issues/7611
          poetry config installer.max-workers 1
          #Setup AWS Connection
          export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain epc-power-us --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} --query authorizationToken --output text`
          poetry config repositories.epc-power https://epc-power-us-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.us-east-2.amazonaws.com/pypi/epc-power/
          poetry config http-basic.epc-power aws $CODEARTIFACT_AUTH_TOKEN
          cd pulse/installer
          poetry install
          poetry run python upload_to_sharepoint.py --local-file "${{ github.workspace }}/pulse/installer/package/PulseInstaller_${{ github.ref_name }}.exe" --version-tag ${{ github.ref_name }}
      - name: Archive manufacturing artifacts
        if: startsWith(github.ref, 'refs/tags/') && env.SEMVER_VALID == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: PulseInstaller_${{ github.ref_name }}
          path: |
            ${{ github.workspace }}\pulse\installer\package\PulseInstaller_${{ github.ref_name }}.exe

  stop-runner:
    name: Stop EC2 Runner
    if: always()
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_DEV_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEV_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Authenticate GitHub CLI using PAT
        run: |
          echo "${{ secrets.SELF_HOSTED_RUNNER_WIN_22_TOKEN }}" | gh auth login --with-token

      - name: Wait before runner status check
        run: sleep 20

      - name: Check if any runner is busy
        id: runner-busy-check
        run: |
          owner=$(echo "${{ github.repository }}" | cut -d'/' -f1)
          repo=$(echo "${{ github.repository }}" | cut -d'/' -f2)

          # Get all self-hosted runners for this repository
          runners=$(gh api "/repos/$owner/$repo/actions/runners" | jq '.runners')

          busy=$(echo "$runners" | jq '[.[] | select(.name | test("self-hosted-win-22")) | select(.busy == true)] | length')

          echo "Busy runners: $busy"

          if [ "$busy" -eq 0 ]; then
            echo "STOP=true" >> $GITHUB_OUTPUT
          else
            echo "STOP=false" >> $GITHUB_OUTPUT
          fi

      - name: Stop EC2 instance
        if: steps.runner-busy-check.outputs.STOP == 'true'
        run: |
          aws ec2 stop-instances --instance-ids ${{ env.EC2_INSTANCE_ID }}
          echo "Waiting for EC2 instance to stop..."
          aws ec2 wait instance-stopped --instance-ids ${{ env.EC2_INSTANCE_ID }}
          echo "Instance is stopped."
