name: CI (Linux)

on:
  push:
    branches:
      - '**'
    tags:
      - '**'
  schedule:
    - cron: '23 5 * * *'  # Daily at 9:23 PM PST (05:23 UTC)

env:
  PYTHON_VERSION: '3.10'
  AWS_REGION: us-east-2

jobs:
  build-linux:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          # submodules: recursive
          # token: ${{ secrets.CI_PULSE_TOKEN }}

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache ccache
        uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/*.[ch]pp', '**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Check Semantic Versioning
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # Regex for a semver digit
          D='0|[1-9][0-9]*'
          # Regex for a semver pre-release word
          PW='[0-9]*[a-zA-Z-][0-9a-zA-Z-]*'
          # Regex for a semver build-metadata word
          MW='[0-9a-zA-Z-]+'

          echo $GITHUB_REF_NAME

          if [[ "$GITHUB_REF_NAME" =~ ^v($D)\.($D)\.($D)(-(($D|$PW)(\.($D|$PW))*))?(\+($MW(\.$MW)*))?$ ]]; then
            echo "Valid semantic version detected: ${GITHUB_REF_NAME}"
            echo "SEMVER_VALID=true" >> "$GITHUB_ENV"
          else
            echo "Invalid semantic version: ${GITHUB_REF_NAME}. Skipping tagged steps."
            echo "SEMVER_VALID=false" >> "$GITHUB_ENV"
          fi

      - name: SemVer Valid
        run: echo "SEMVER_VALID=$SEMVER_VALID"

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y cmake ninja-build p7zip-full python3-pip git build-essential ccache

      - name: Install aqtinstall and QtIFW
        run: |
          pip3 install --upgrade aqtinstall
          aqt install-tool linux desktop tools_ifw qt.tools.ifw.47 --outputdir ${{ github.workspace }}

      - name: Install Qt6 and extra modules
        run: |
          aqt list-qt linux desktop --arch 6.8.2
          aqt install-qt linux desktop 6.8.2 linux_gcc_64 --outputdir ${{ github.workspace }}/Qt --modules qtwebsockets qtserialbus qtserialport qtcharts

      - name: Install Qt6Mqtt
        run: |
          git clone https://github.com/qt/qtmqtt.git
          cd qtmqtt
          git checkout 6.8.2
          mkdir build && cd build
          ${{ github.workspace }}/Qt/6.8.2/linux_gcc_64/bin/qt-cmake ..
          cmake --build .
          sudo cmake --install .

      - name: Configure OpenSSL environment
        run: |
          echo "OPENSSL_ROOT_DIR=/usr" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
          
      - name: Set PULSE_VERSION in CMakeLists.txt before building
        if: startsWith(github.ref, 'refs/tags/') && env.SEMVER_VALID == 'true'
        run: |
          SW_VERSION="${{ github.ref_name }}"
          SW_VERSION_DROPPED_V=${SW_VERSION#v}
          sed -i -E "s/set\(PULSE_VERSION .*?\)/set(PULSE_VERSION \"${SW_VERSION_DROPPED_V}\")/" pulse/CMakeLists.txt
          cat pulse/CMakeLists.txt

      - name: Configure CMake
        run: |
          cmake -S . -B build \
            -G Ninja \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_PREFIX_PATH="${{ github.workspace }}/Qt/6.8.2/linux_gcc_64" \
            -DOPENSSL_ROOT_DIR=/usr

      - name: Build
        run: cmake --build build --target all --parallel

      - name: Deploy & Create Installer
        if: startsWith(github.ref, 'refs/tags/') && env.SEMVER_VALID == 'true'
        run: |
          cmake --install build --prefix "${{ github.workspace }}/installprefix"
          ls ${{ github.workspace }}/installprefix/bin
          python3 ${{ github.workspace }}/pulse/installer/makeinstaller.py \
            --install-prefix "${{ github.workspace }}/installprefix" \
            --qt-directory "${{ github.workspace }}/Qt" \
            --qt-version "6.8.2" \
            --qtifw-directory "${{ github.workspace }}/Tools/QtInstallerFramework/4.7" \
            --openssl-directory "/usr"

      - name: Install Poetry & deploy installer to SharePoint
        if: startsWith(github.ref, 'refs/tags/') && env.SEMVER_VALID == 'true'
        run: |
          python3 -m pip install poetry==1.5.1
          poetry config virtualenvs.in-project true
          poetry config virtualenvs.path .
          poetry config installer.max-workers 1

          export CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token \
            --domain epc-power-us \
            --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} \
            --query authorizationToken \
            --output text)

          poetry config repositories.epc-power https://epc-power-us-${{ secrets.AWS_ACCOUNT_ID }}.d.codeartifact.us-east-2.amazonaws.com/pypi/epc-power/
          poetry config http-basic.epc-power aws $CODEARTIFACT_AUTH_TOKEN

          cd pulse/installer
          poetry install
          poetry run python upload_to_sharepoint.py \
            --local-file "${{ github.workspace }}/pulse/installer/package/PulseInstaller_${{ github.ref_name }}.exe" \
            --version-tag ${{ github.ref_name }}

      - name: Archive manufacturing artifacts
        if: startsWith(github.ref, 'refs/tags/') && env.SEMVER_VALID == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: PulseInstaller_${{ github.ref_name }}
          path: |
            ${{ github.workspace }}/pulse/installer/package/PulseInstaller_${{ github.ref_name }}.exe
